#include <Servo.h>
#include <RF24_config.h>
#include "SPI.h"
#include "RF24.h"
#include "nRF24L01.h"

//zdefiniowanie pinów CE i CSN
#define CE_PIN 7
#define CSN_PIN 8

//zdefiniowanie czasow utracenia polaczenia i ponownej proby laczenia
#define INTERVAL_MS_SIGNAL_LOST 1000
#define INTERVAL_MS_SIGNAL_RETRY 250

//przypisanie pinów CE i CSN
RF24 radio(CE_PIN, CSN_PIN);

//obiekt klasy servo
Servo esc;

//wspolny adres dla nadajnika i odbiornika
const byte address[6] = "00001";

//struktura odbieranych danych przez NRF24L01
struct payload {
  int PWM;
};
payload payload;

unsigned long lastReceiveTime = 0;
unsigned long currentTime = 0;

void setup() {
  //ustawienie szybkości transmisji
  Serial.begin(115200);
  //poczatek transmisji bezprzewodowej
  radio.begin();

  //wylaczenie pakietow z automatycznym potwierdzeniem
  radio.setAutoAck(false);  //(true|false)
  //ustawienie predkosci transmisji danych
  radio.setDataRate(RF24_2MBPS);  //(RF24_250KBPS|RF24_1MBPS|RF24_2MBPS)
  //Wyzszy poziom = Wiecej poieranego pradu = Wiekszy zasieg transmisjii
  radio.setPALevel(RF24_PA_LOW);  //(RF24_PA_MIN|RF24_PA_LOW|RF24_PA_HIGH|RF24_PA_MAX)
  radio.setPayloadSize(sizeof(payload));
  //Ustawienie urzadzenia jako odbiornik
  radio.openReadingPipe(0, address);
  radio.startListening();
  //prototyp funkcji restartu danych
  resetData();
  //przypisanie obiektowi esc klasy servo pinu 3
  esc.attach(3);
}

void loop() {
  //przypisanie do zmiennej aktualnego czasu zegara systemowego
  unsigned long currentTime = millis();

  if (radio.available() > 0) {
    //odczyt danych z nadajnika
    radio.read(&payload, sizeof(payload));
    //przypisanie aktualnego czasu do zmiennej poprzedniego czasu odbioru danych
    lastReceiveTime = currentTime;
  }

  if (currentTime - lastReceiveTime > INTERVAL_MS_SIGNAL_LOST) {
    //w przypadku zbyt duzej roznicy czasu aktualnego i poprzedniego wywolywana jest funkcja resetu danych
    resetData();
  }

  //przetworzenie zmiennej typu int na sygnal PWM i wyslanie go do esc pinem 3
  esc.writeMicroseconds(payload.PWM);
}

//w przypadku opoznien transmisji ustawiana jest wartosc nie powodujaca obrotu silnikow
void resetData() {
  payload.PWM = 1497;
  delay(INTERVAL_MS_SIGNAL_RETRY);
}
